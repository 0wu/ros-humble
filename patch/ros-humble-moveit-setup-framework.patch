diff --git a/CMakeLists.txt b/CMakeLists.txt
index b9f386ab7..533b06705 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -5,6 +5,8 @@ project(moveit_setup_framework)
 find_package(moveit_common REQUIRED)
 moveit_package()
 
+set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)
+
 find_package(ament_cmake REQUIRED)
 find_package(ament_cmake_ros REQUIRED)
 find_package(ament_index_cpp REQUIRED)
@@ -11,8 +11,9 @@ find_package(ament_index_cpp REQUIRED)
 find_package(moveit_core REQUIRED)
 find_package(moveit_ros_planning REQUIRED)
 find_package(moveit_ros_visualization REQUIRED)
-find_package(Qt5Core REQUIRED)
-find_package(Qt5Widgets REQUIRED)
+# find_package(Qt5Core REQUIRED)
+# find_package(Qt5Widgets REQUIRED)
+find_package(Qt5 COMPONENTS Core Widgets REQUIRED)
 find_package(pluginlib REQUIRED)
 find_package(rclcpp REQUIRED)
 find_package(rviz_common REQUIRED)
@@ -52,8 +53,9 @@ ament_target_dependencies(${PROJECT_NAME}
   moveit_ros_planning
   moveit_ros_visualization
   pluginlib
-  Qt5Core
-  Qt5Widgets
+  # Qt5Core
+  # Qt5Widgets
+  Qt5
   rclcpp
   rviz_common
   rviz_rendering
@@ -84,8 +86,9 @@ install(TARGETS ${PROJECT_NAME}
 )
 ament_export_include_directories(include)
 ament_export_dependencies(rclcpp)
-ament_export_dependencies(Qt5Core)
-ament_export_dependencies(Qt5Widgets)
+# ament_export_dependencies(Qt5Core)
+# ament_export_dependencies(Qt5Widgets)
+# ament_export_dependencies(Qt5)
 ament_export_dependencies(moveit_common)
 ament_export_dependencies(moveit_core)
 ament_export_dependencies(moveit_ros_planning)
diff --git a/src/urdf_config.cpp b/src/urdf_config.cpp
index 290c9e8a2a..accfae25af 100644
--- a/src/urdf_config.cpp
+++ b/src/urdf_config.cpp
@@ -116,7 +116,7 @@ void URDFConfig::setPackageName()
 void URDFConfig::loadFromPackage(const std::filesystem::path& package_name, const std::filesystem::path& relative_path,
                                  const std::string& xacro_args)
 {
-  urdf_pkg_name_ = package_name;
+  urdf_pkg_name_ = package_name.string();
   urdf_pkg_relative_path_ = relative_path;
   xacro_args_ = xacro_args;
 
@@ -129,12 +129,12 @@ void URDFConfig::load()
   RCLCPP_DEBUG_STREAM(*logger_, "URDF Package Name: " << urdf_pkg_name_);
   RCLCPP_DEBUG_STREAM(*logger_, "URDF Package Path: " << urdf_pkg_relative_path_);
 
-  if (!rdf_loader::RDFLoader::loadXmlFileToString(urdf_string_, urdf_path_, xacro_args_vec_))
+  if (!rdf_loader::RDFLoader::loadXmlFileToString(urdf_string_, urdf_path_.string(), xacro_args_vec_))
   {
     throw std::runtime_error("URDF/COLLADA file not found: " + urdf_path_.string());
   }
 
-  if (urdf_string_.empty() && rdf_loader::RDFLoader::isXacroFile(urdf_path_))
+  if (urdf_string_.empty() && rdf_loader::RDFLoader::isXacroFile(urdf_path_.string()))
   {
     throw std::runtime_error("Running xacro failed.\nPlease check console for errors.");
   }
@@ -144,7 +144,7 @@ void URDFConfig::load()
   {
     throw std::runtime_error("URDF/COLLADA file is not a valid robot model.");
   }
-  urdf_from_xacro_ = rdf_loader::RDFLoader::isXacroFile(urdf_path_);
+  urdf_from_xacro_ = rdf_loader::RDFLoader::isXacroFile(urdf_path_.string());
 
   // Set parameter
   parent_node_->set_parameter(rclcpp::Parameter("robot_description", urdf_string_));
@@ -154,7 +154,7 @@ void URDFConfig::load()
 
 bool URDFConfig::isXacroFile() const
 {
-  return rdf_loader::RDFLoader::isXacroFile(urdf_path_);
+  return rdf_loader::RDFLoader::isXacroFile(urdf_path_.string());
 }
 
 bool URDFConfig::isConfigured() const
@@ -172,7 +172,7 @@ void URDFConfig::collectVariables(std::vector<TemplateVariable>& variables)
   std::string urdf_location;
   if (urdf_pkg_name_.empty())
   {
-    urdf_location = urdf_path_;
+    urdf_location = urdf_path_.string();
   }
   else
   {
diff --git a/include/moveit_setup_framework/data/srdf_config.hpp b/include/moveit_setup_framework/data/srdf_config.hpp
index 4b3fae3440..c6a28092e7 100644
--- a/include/moveit_setup_framework/data/srdf_config.hpp
+++ b/include/moveit_setup_framework/data/srdf_config.hpp
@@ -262,7 +262,7 @@ class SRDFConfig : public SetupConfig
 
   bool write(const std::filesystem::path& path)
   {
-    return srdf_.writeSRDF(path);
+    return srdf_.writeSRDF(path.string());
   }
 
   std::filesystem::path getPath() const
diff --git a/src/srdf_config.cpp b/src/srdf_config.cpp
index 9058aea1c0..394687af2d 100644
--- a/src/srdf_config.cpp
+++ b/src/srdf_config.cpp
@@ -88,7 +88,7 @@ void SRDFConfig::loadSRDFFile(const std::filesystem::path& srdf_file_path, const
   loadURDFModel();
 
   std::string srdf_string;
-  if (!rdf_loader::RDFLoader::loadXmlFileToString(srdf_string, srdf_path_, xacro_args))
+  if (!rdf_loader::RDFLoader::loadXmlFileToString(srdf_string, srdf_path_.string(), xacro_args))
   {
     throw std::runtime_error("SRDF file not found: " + srdf_path_.string());
   }
diff --git a/src/utilities.cpp b/src/utilities.cpp
index 51e207f0d8..145f39fda8 100644
--- a/src/utilities.cpp
+++ b/src/utilities.cpp
@@ -62,7 +62,7 @@ bool extractPackageNameFromPath(const std::filesystem::path& path, std::string&
       // Default package name to folder name
       package_name = sub_path.filename().string();
       tinyxml2::XMLDocument package_xml_file;
-      auto is_open = package_xml_file.LoadFile((sub_path / "package.xml").c_str());
+      auto is_open = package_xml_file.LoadFile((sub_path / "package.xml").string().c_str());
       if (is_open == tinyxml2::XML_SUCCESS)
       {
         auto name_potential =
