diff --git a/src/realtime.cpp b/src/realtime.cpp
index 7c770448..33bfe2f1 100644
--- a/src/realtime.cpp
+++ b/src/realtime.cpp
@@ -34,10 +34,14 @@ bool has_realtime_kernel()
 
 bool configure_sched_fifo(int priority)
 {
+#if __linux__
   struct sched_param schedp;
   memset(&schedp, 0, sizeof(schedp));
   schedp.sched_priority = priority;
   return !sched_setscheduler(0, SCHED_FIFO, &schedp);
+#else
+  return false;
+#endif
 }
 
 }  // namespace controller_manager
diff --git a/src/ros2_control_node.cpp b/src/ros2_control_node.cpp
index b8468318..813e8232 100644
--- a/src/ros2_control_node.cpp
+++ b/src/ros2_control_node.cpp
@@ -19,20 +19,10 @@
 #include <thread>
 
 #include "controller_manager/controller_manager.hpp"
-#include "controller_manager/realtime.hpp"
 #include "rclcpp/rclcpp.hpp"
 
 using namespace std::chrono_literals;
 
-namespace
-{
-// Reference: https://man7.org/linux/man-pages/man2/sched_setparam.2.html
-// This value is used when configuring the main loop to use SCHED_FIFO scheduling
-// We use a midpoint RT priority to allow maximum flexibility to users
-int const kSchedPriority = 50;
-
-}  // namespace
-
 int main(int argc, char ** argv)
 {
   rclcpp::init(argc, argv);
@@ -43,46 +33,36 @@ int main(int argc, char ** argv)
 
   auto cm = std::make_shared<controller_manager::ControllerManager>(executor, manager_node_name);
 
-  RCLCPP_INFO(cm->get_logger(), "update rate is %d Hz", cm->get_update_rate());
-
+  // TODO(anyone): Due to issues with the MutliThreadedExecutor, this control loop does not rely on
+  // the executor (see issue #260).
+  // When the MutliThreadedExecutor issues are fixed (ros2/rclcpp#1168), this loop should be
+  // converted back to a timer.
   std::thread cm_thread(
     [cm]()
     {
-      if (controller_manager::has_realtime_kernel())
-      {
-        if (!controller_manager::configure_sched_fifo(kSchedPriority))
-        {
-          RCLCPP_WARN(cm->get_logger(), "Could not enable FIFO RT scheduling policy");
-        }
-      }
-      else
-      {
-        RCLCPP_INFO(cm->get_logger(), "RT kernel is recommended for better performance");
-      }
+      RCLCPP_INFO(cm->get_logger(), "update rate is %d Hz", cm->get_update_rate());
 
-      // for calculating sleep time
-      auto const period = std::chrono::nanoseconds(1'000'000'000 / cm->get_update_rate());
-      std::chrono::system_clock::time_point next_iteration_time =
-        std::chrono::system_clock::time_point(std::chrono::nanoseconds(cm->now().nanoseconds()));
+      rclcpp::Time current_time = cm->now();
+      rclcpp::Time previous_time = current_time;
+      rclcpp::Time end_period = current_time;
 
-      // for calculating the measured period of the loop
-      rclcpp::Time previous_time = cm->now();
+      // Use nanoseconds to avoid chrono's rounding
+      rclcpp::Duration period(std::chrono::nanoseconds(1000000000 / cm->get_update_rate()));
 
       while (rclcpp::ok())
       {
-        // calculate measured period
-        auto const current_time = cm->now();
-        auto const measured_period = current_time - previous_time;
-        previous_time = current_time;
+        // wait until we hit the end of the period
+        end_period += period;
+        std::this_thread::sleep_for(
+          std::chrono::nanoseconds((end_period - cm->now()).nanoseconds()));
 
         // execute update loop
-        cm->read(cm->now(), measured_period);
-        cm->update(cm->now(), measured_period);
-        cm->write(cm->now(), measured_period);
-
-        // wait until we hit the end of the period
-        next_iteration_time += period;
-        std::this_thread::sleep_until(next_iteration_time);
+        current_time = cm->now();
+        auto period = current_time - previous_time;
+        previous_time = current_time;
+        cm->read(current_time, period);
+        cm->update(current_time, period);
+        cm->write(current_time, period);
       }
     });
 
