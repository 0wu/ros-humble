diff --git a/include/nav2_constrained_smoother/smoother_cost_function.hpp b/include/nav2_constrained_smoother/smoother_cost_function.hpp
index 8272b2f2aa..c0c3919ccc 100644
--- a/include/nav2_constrained_smoother/smoother_cost_function.hpp
+++ b/include/nav2_constrained_smoother/smoother_cost_function.hpp
@@ -159,7 +159,7 @@ class SmootherCostFunction
     Eigen::Matrix<T, 2, 1> center = arcCenter(
       pt_prev, pt, pt_next,
       next_to_last_length_ratio_ < 0);
-    if (ceres::IsInfinite(center[0])) {
+    if (ceres::isinf(center[0])) {
       return;
     }
     T turning_rad = (pt - center).norm();
diff --git a/nav2_constrained_smoother/include/nav2_constrained_smoother/utils.hpp b/nav2_constrained_smoother/include/nav2_constrained_smoother/utils.hpp
index 9be4e88f0b..682ed1c16b 100644
--- a/include/nav2_constrained_smoother/utils.hpp
+++ b/include/nav2_constrained_smoother/utils.hpp
@@ -86,7 +86,7 @@ inline Eigen::Matrix<T, 2, 1> tangentDir(
   bool is_cusp)
 {
   Eigen::Matrix<T, 2, 1> center = arcCenter(pt_prev, pt, pt_next, is_cusp);
-  if (ceres::IsInfinite(center[0])) {  // straight line
+  if (ceres::isinf(center[0])) {  // straight line
     Eigen::Matrix<T, 2, 1> d1 = pt - pt_prev;
     Eigen::Matrix<T, 2, 1> d2 = pt_next - pt;
 
